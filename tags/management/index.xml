<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>management on Dan Goldin</title><link>/tags/management/</link><description>Recent content in management on Dan Goldin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 24 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/management/index.xml" rel="self" type="application/rss+xml"/><item><title>Incident response</title><link>/2020/12/24/incident-response/</link><pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate><guid>/2020/12/24/incident-response/</guid><description>In honor of everyone on-call during the holidays I thought I&amp;rsquo;d share my evolving thoughts around incident response. Every company has something here and as much as we can strive for perfection it&amp;rsquo;s impossible and we&amp;rsquo;ll inevitably have incidents that need handling.
I&amp;rsquo;m still thinking through the exact way to approach and summarize my thoughts but I find it useful to start with goals and first principles. The ultimate goals are to resolve the issue as quickly as possible and prevent them and other similar issues from recurring.</description></item><item><title>An ounce of prevention is worth a pound of cure</title><link>/2020/12/23/an-ounce-of-prevention-is-worth-a-pound-of-cure/</link><pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate><guid>/2020/12/23/an-ounce-of-prevention-is-worth-a-pound-of-cure/</guid><description>As we get into the last week of the year many software teams are in a code freeze - avoiding any deployments that may cause an incident and cause a dreaded holiday page. We have a tendency to reward the firefighter for pulling an all-nighter fighting an outage but don&amp;rsquo;t value those that avoid the fire in the first place. It&amp;rsquo;s natural to throw accolades at the firefighter since it&amp;rsquo;s very easy to see the impact in their work; it&amp;rsquo;s more difficult to see the value in the person that prevents issues from even happening.</description></item><item><title>Working your way up the engineering management stack</title><link>/2020/08/28/working-your-way-up-the-engineering-management-stack/</link><pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate><guid>/2020/08/28/working-your-way-up-the-engineering-management-stack/</guid><description>During a engineering management peer group discussion this morning we were talking about how involved each of us are in our team&amp;rsquo;s activities - for example how often do we look at code? Do we leave comments on pull requests? How involved are we in spec reviews? And a variety of questions of that ilk.
At that point in time I wasn&amp;rsquo;t clever enough to come up with a framework but it&amp;rsquo;s very much about working your way up further from the code as you work your way up the management track.</description></item><item><title>Yards, balls, fences, and software engineering</title><link>/2020/08/20/yards-balls-fences-and-software-engineering/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>/2020/08/20/yards-balls-fences-and-software-engineering/</guid><description>One of my strongest beliefs is that the best engineers are able to find ways to unblock themselves. Similarly, a pet peeve is when people say &amp;ldquo;that&amp;rsquo;s not my job&amp;rdquo; and expect a problem to be fixed by someone else. Sure this may occasionally happen but it&amp;rsquo;s important to have the attitude that you&amp;rsquo;re willing to get your hands dirty in order to solve your problem and move on.
An analogy I used to represent this concept is to imagine having a house with a yard that&amp;rsquo;s next to a neighbor.</description></item><item><title>The sandpaper learning method</title><link>/2020/08/18/the-sandpaper-learning-method/</link><pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate><guid>/2020/08/18/the-sandpaper-learning-method/</guid><description>When gluing two pieces of wood it&amp;rsquo;s useful to use sandpaper to improve the effectiveness of the glue. Learning follows the same pattern: you want to struggle a bit and get yourself ready so the knowledge sticks.
Imagine you have two people who each encounter a problem they don&amp;rsquo;t know how to solve. The first immediately goes and asks for help from a peer and quickly get it resolved. The second person tries to solve it themselves, does research, tries a few different approaches, struggles throughout and then ends up getting help from a peer.</description></item><item><title>Three types of advice from a manager</title><link>/2020/08/09/three-types-of-advice-from-a-manager/</link><pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate><guid>/2020/08/09/three-types-of-advice-from-a-manager/</guid><description>During one of my first meetings with a former manager he gave me an introduction to his working style. One of these was how he gave three types of advice:
A passing thought. This is not something that was thought of too deeply and just popped into my mind. I&amp;rsquo;m sharing it in case it&amp;rsquo;s helpful but it&amp;rsquo;s just as likely to be useful. A suggestion but trust you. I&amp;rsquo;ve run into similar scenarios in the past and learned from those experiences.</description></item><item><title>Catch up with your former coworkers</title><link>/2020/06/10/catch-up-with-your-former-coworkers/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>/2020/06/10/catch-up-with-your-former-coworkers/</guid><description>It used to be the case that people used to work at a company for decades, some even retired at the same company they started working at. We&amp;rsquo;re no longer in that world. These days it&amp;rsquo;s rare to find someone who&amp;rsquo;s worked at a company for longer than 5 years.
There is a benefit to this rotation though: when people change jobs they also bring their ideas and experiences, mix them with those at their new company, and converge to better and better approaching.</description></item><item><title>Three categories of software engineering work</title><link>/2020/05/30/three-categories-of-software-engineering-work/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><guid>/2020/05/30/three-categories-of-software-engineering-work/</guid><description>Managers love frameworks to help think through problems and I&amp;rsquo;m no different. While trying to think of a way to reason through our engineering work I started grouping it into three major categories:
Should have been done yesterday. Self explanatory but these are the items that as soon as you discover them you wish they had already been done. Critical bugs and issues fall into this but also product oversights that you wish you caught earlier.</description></item><item><title>Metrics, logging, and error reporting</title><link>/2020/05/27/metrics-logging-and-error-reporting/</link><pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate><guid>/2020/05/27/metrics-logging-and-error-reporting/</guid><description>As software engineers it’s vital to understand how our applications are performing. The more information we have the better we can address problems, improve performance, and generally better solve problems for our customers. Imagine releasing a product with nothing being collected - you&amp;rsquo;d be flying blind.
I&amp;rsquo;m a huge advocate for measuring application performance in terms of business metrics and aligning it as much with the customer experience as possible. This post does not go into that.</description></item><item><title>The curse of mastery</title><link>/2020/05/16/the-curse-of-mastery/</link><pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate><guid>/2020/05/16/the-curse-of-mastery/</guid><description>One of the most valuable skills a software engineer can have is a &amp;ldquo;tabula rasa&amp;rdquo; mindset. Tabula rasa, Latin for blank slate, is a philosophical concept dating back to Aristotle to explain how human minds are blank from the beginning and acquire knowledge through the human experience.
I think of it as being able to approach new challenges and experiences with no prior bias. Done well, this is an incredible power since you&amp;rsquo;re able to cut through the complexity and focus on what actually matters.</description></item><item><title>Sometimes it really is just the dirty, hard work</title><link>/2020/05/02/sometimes-it-really-is-just-the-dirty-hard-work/</link><pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate><guid>/2020/05/02/sometimes-it-really-is-just-the-dirty-hard-work/</guid><description>It&amp;rsquo;s easy to fall into the trap of only wanting to do the new and sexy thing and giving up as soon as something requires the dirty work. That&amp;rsquo;s rarely a strategy for success and jumping from one idea to another idea and only focusing on the interesting parts is a sure fire way to not get anything done.
Last week I had a brief conversation with Twitter that got me looking for Apple&amp;rsquo;s S-1.</description></item><item><title>Engineering management resources</title><link>/2020/04/25/engineering-management-resources/</link><pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate><guid>/2020/04/25/engineering-management-resources/</guid><description>At the beginning of the year I gave myself a goal to write more management posts. We&amp;rsquo;re nearly 5 months into the year and I&amp;rsquo;ve written only two posts even relating to management. A big reason is impostor syndrome - while I have only been managing a few years there are so many others that have more experience, are better managers, and are more effective writers. At the same time, the lack of experience hasn&amp;rsquo;t really stopped me from writing on other topics though so why should this be any different?</description></item><item><title>Micromanaging is underrated</title><link>/2020/02/04/micromanaging-is-underrated/</link><pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate><guid>/2020/02/04/micromanaging-is-underrated/</guid><description>A common belief is that micromanaging is a poor way to manage. I subscribe to this view - it&amp;rsquo;s demotivating to have someone second-guessing every step and eliminates agency and autonomy. I&amp;rsquo;d rather have someone make a few mistakes and learn along the way rather than impose a top-down view that disincentives growth.
While reading Bob Iger&amp;rsquo;s biography, I came across a simple statement from his former boss and Disney CEO, Michael Eisner: &amp;ldquo;Micromanaging is underrated.</description></item><item><title>Build for optionality</title><link>/2020/01/03/build-for-optionality/</link><pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate><guid>/2020/01/03/build-for-optionality/</guid><description>I wrote a company wide email back in September titled &amp;ldquo;Building for optionality&amp;rdquo; that describes how our engineering team maintains its impact despite the growing complexity of the business. There are a few TripleLift-specific concepts that I stripped away to make it more approachable but the theme is the same.
For a company that’s growing and changing as quickly as TripleLift, it’s critical to make sure our code is as impactful as possible.</description></item><item><title>Netflix's CEO transition</title><link>/2019/12/22/netflixs-ceo-transition/</link><pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate><guid>/2019/12/22/netflixs-ceo-transition/</guid><description>While browsing Quora I came across a neat answer by Marc Randolph, the founder of Netflix, to the question &amp;ldquo;What led you to step down as Netflix’s CEO?&amp;rdquo; I didn&amp;rsquo;t even know Netflix had a founder other than Reed Hastings and beyond that didn&amp;rsquo;t know that there was a CEO transition that early in its history.
Netflix is an incredibly dominant company now but it took more than two decades to get there.</description></item><item><title>Make sure you're understood</title><link>/2019/10/06/make-sure-youre-understood/</link><pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate><guid>/2019/10/06/make-sure-youre-understood/</guid><description>While browsing Twitter I saw a simple visualization that spoke to me. Communication is what makes us human and good communication is critical to strong teams. Historically, I&amp;rsquo;ve definitely fallen in assuming that when I spoke what people understood was exactly what I thought and was both surprised and disappointed when that wasn&amp;rsquo;t the case.
That diagram is an oversimplification but it gets the point across. It&amp;rsquo;s an incredibly valuable skill to be able to translate your thoughts into the exact words that can be understood by others, especially extemporaneously.</description></item><item><title>Goldilocks and the three implementations</title><link>/2019/09/16/goldilocks-and-the-three-implementations/</link><pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate><guid>/2019/09/16/goldilocks-and-the-three-implementations/</guid><description>While browsing Twitter I came across the following tweet that resonated:
A common refrain I have is that the best engineers are not the ones that write the most code but are instead making decisions that reduce the amount of code that needs to be written in the future. This tweet speaks to that since very often an implementation will either be too simple to support a future use or be over-implemented to support a potential future use case.</description></item><item><title>Explain the why in code reviews</title><link>/2019/08/25/explain-the-why-in-code-reviews/</link><pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate><guid>/2019/08/25/explain-the-why-in-code-reviews/</guid><description>This may be obvious to most people but it&amp;rsquo;s still worth reiterating: if you&amp;rsquo;re leaving a comment on a code review make sure to explain your reasoning. Code reviews are a key component in writing high quality code, improving everyone&amp;rsquo;s skills and knowledge, and encouraging a strong and collaborative team.
Code reviews can be a bit clinical with feedback being blunt and a few words and it&amp;rsquo;s important to add context to all but the simplest of feedback.</description></item><item><title>Ideal tech intern projects</title><link>/2019/07/09/ideal-tech-intern-projects/</link><pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate><guid>/2019/07/09/ideal-tech-intern-projects/</guid><description>Having a tech internship program is a big investment that companies should not undertake without making sure they can put in the work to make it successful. Some companies approach it as a source of extra help but without giving the interns the support they need it will end up in hurt productivity for them and the rest of the team.
The ultimate goal of an internship is to provide useful work, determine whether there&amp;rsquo;s an opportunity for a full time role, and sell the candidate on that opportunity.</description></item><item><title>Type 1 and Type 2 tech specs</title><link>/2018/06/01/type-1-and-type-2-tech-specs/</link><pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate><guid>/2018/06/01/type-1-and-type-2-tech-specs/</guid><description>Every year since Amazon went public, Jeff Bezos writes an insightful and penetrating shareholder letter that covers a variety of business topics driving Amazon’s success. In 2015 he wrote about Type 1 and Type 2 decisions:
We want to be a large company that’s also an invention machine. We want to combine the extraordinary customer-serving capabilities that are enabled by size with the speed of movement, nimbleness, and risk-acceptance mentality normally associated with entrepreneurial start-ups.</description></item><item><title>People do what you inspect, not what you expect</title><link>/2017/12/26/people-do-what-you-inspect-not-what-you-expect/</link><pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate><guid>/2017/12/26/people-do-what-you-inspect-not-what-you-expect/</guid><description>While reading Who Says Elephants Can’t Dance about the revival of IBM in the 90s I came across a simple, yet profound statement by Louis Gerstner: “People do what you inspect, not what you expect.” We hear variations of this constantly and it’s true - if you want to drive behavior change you need to make sure that’s what you’re actually measuring and holding people accountable for. Otherwise we all run the risk of preaching what we don’t practice.</description></item><item><title>Measuring sprint efficiency</title><link>/2017/12/01/measuring-sprint-efficiency/</link><pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate><guid>/2017/12/01/measuring-sprint-efficiency/</guid><description>Most startups employ some form of Agile software development and one of the most common approaches is Scrum which breaks down units of work into time based periods. I don’t want to spend too much time describing either Agile or Scrum since I suspect most are familiar with the concepts but a big challenge is measuring productivity. There are tons of different ways of doing this but the vast majority are different ways of looking at the relationship between story points and sprints.</description></item><item><title>The different flavors of engineering interviews</title><link>/2017/05/17/the-different-flavors-of-engineering-interviews/</link><pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate><guid>/2017/05/17/the-different-flavors-of-engineering-interviews/</guid><description>Technical interviews often come in a variety of flavors and I thought it would be interesting to list as many as I can think of and my thoughts on each one. In general I think there’s value in each type of approach but some are going to be more appropriate than others depending on the person’s experience and role.
Brainteaser. These are seemingly simple problems that require a trick or insight to get them right.</description></item><item><title>Refactor driven development</title><link>/2017/03/19/refactor-driven-development/</link><pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate><guid>/2017/03/19/refactor-driven-development/</guid><description>There are a variety of software development methodologies and I’d like to throw another one into the fray - refactor driven development. Rather than focusing on tests or models or functions the focus should be on expressive and maintainable code. Imagine spending 80% of your development time on refactoring old code and laying a solid foundation for all future work. Then the remaining 20% of the time can be spent on writing new features and functionality that drive the product forward.</description></item><item><title>Automating admin work: Spreadsheets to Slack</title><link>/2017/03/04/automating-admin-work-spreadsheets-to-slack/</link><pubDate>Sat, 04 Mar 2017 00:00:00 +0000</pubDate><guid>/2017/03/04/automating-admin-work-spreadsheets-to-slack/</guid><description>Recently we adopted the concept of owning your own up time for our engineering teams. The goal is to encourage a stronger sense of ownership and actually give the teams the autonomy to approach their development and release process the way they’re comfortable with. Before this we relied on a single on call every week that would be responsible for monitoring all issues and escalating them to the appropriate team. One minor side effect of this change was that I now had to manage the on call calendar and post the new rotation on Slack every week.</description></item><item><title>Becoming a better developer</title><link>/2016/11/30/becoming-a-better-developer/</link><pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate><guid>/2016/11/30/becoming-a-better-developer/</guid><description>Yesterday I had the privilege of giving a talk at HackReactor titled “Things I wish I knew” which was an amalgam of the various themes and topics I’ve been blogging and thinking about. While going through the blog I came up with two themes for the topic - the first was tactics that would make someone a better programmer immediately and the second was how to improve as a developer over time.</description></item><item><title>Automating management</title><link>/2016/09/18/automating-management/</link><pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate><guid>/2016/09/18/automating-management/</guid><description>One of the biggest lessons I learned when I became an engineering manager was how important the basic operational elements. These are all the things that need to get done outside of code and allow the whole team to be as productive as possible and range from reminding people to do code reviews to creating dashboards to highlight key metrics to enforcing an on-call process. These tasks are important yet repetitive so being a good engineer I’ve spent some time automating them.</description></item><item><title>Engineering management: Measuring the unmeasurable</title><link>/2016/08/07/engineering-management-measuring-the-unmeasurable/</link><pubDate>Sun, 07 Aug 2016 00:00:00 +0000</pubDate><guid>/2016/08/07/engineering-management-measuring-the-unmeasurable/</guid><description>A key part of management is getting out of the way and building out processes that help your team be as productive as possible. At the same time, you can’t change what you can’t measure. Combining these two makes it clear that to improve, whether people or process, you need to start measuring and tracking the appropriate metrics.
In software engineering, some things are easy to track: how many bugs there are, how quickly they’re resolved, how much code are written - but rarely tell the whole story and may lead to perverse incentives.</description></item><item><title>Maximize the potential energy of your code</title><link>/2016/07/04/maximize-the-potential-energy-of-your-code/</link><pubDate>Mon, 04 Jul 2016 00:00:00 +0000</pubDate><guid>/2016/07/04/maximize-the-potential-energy-of-your-code/</guid><description>Potential energy: the energy of a body or a system with respect to the position of the body or the arrangement of the particles of the system. Dictionary.com Kinetic energy: the energy of a body or a system with respect to the motion of the body or of the particles in the system. Dictionary.com I’m constantly striving to discover new ways of thinking about code and my latest is thinking about it through what many of us learned in high school physics - potential and kinetic energy.</description></item><item><title>Avoid full body code transplants</title><link>/2016/04/27/avoid-full-body-code-transplants/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>/2016/04/27/avoid-full-body-code-transplants/</guid><description>When working on new features it’s easy to keep increasing scope until you end up doing a full rewrite of your code. Don’t. It’s healthy to refactor code as you go but you need to be wary of how many things you’re changing and the risks those changes carry. Code will get stale unless it’s constantly maintained and updated as the rest of the product evolves but trying to change too much at once will make it difficult to diagnose issues and increase the odds of bugs in production.</description></item><item><title>Generalize at n=3</title><link>/2016/04/07/generalize-at-n3/</link><pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate><guid>/2016/04/07/generalize-at-n3/</guid><description>Engineers strive to write code that’s general and flexible enough to adapt to support a variety of cases with minimal changes. Unfortunately, writing general code isn’t easy and requires significant thought, effort, and experimentation. The challenge is figuring out the appropriate time to generalize your code.
If you do it too early you may spend unnecessary time writing generalized code that will never be used again. Even worse you may write code that you think is generalizable but ends up collapsing under its own weight under future scenarios.</description></item><item><title>The best code is no code</title><link>/2016/04/05/the-best-code-is-no-code/</link><pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate><guid>/2016/04/05/the-best-code-is-no-code/</guid><description>The best code isn’t code that’s elegant or code that’s brilliant it’s code that doesn’t need to be written. One of the best feelings is when you can take a new problem and turn it into an existing problem that already has a solution. Sometimes that requires making a few tweaks and compromises to the problem or the code but the time and effort saved can be massive. This requires a deep understanding of the problem being solved as well as the existing code.</description></item><item><title>Describe what your code won't do</title><link>/2016/01/31/describe-what-your-code-wont-do/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>/2016/01/31/describe-what-your-code-wont-do/</guid><description>When starting to spec out a new feature a good habit is to think about what it won’t do. This forces you to focus on the problems that aren’t being solved and makes you aware of the tradeoffs you’re making. Rather than focusing on the problems being solved it’s equally important to know what you’re not doing as well as what your implementation will preclude you from doing in the future.</description></item><item><title>The ownership hierarchy</title><link>/2016/01/23/the-ownership-hierarchy/</link><pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate><guid>/2016/01/23/the-ownership-hierarchy/</guid><description>Great engineers assume end to end ownership of their products. Rather than focusing on one feature at a time they understand how it fits in with the rest of the product and think about the impact it will have on users and the business. This leads to code that scales with the product while being able to be maintained and developed by a small team. But you can only have this with everyone embracing full ownership over a product.</description></item><item><title>The true cost of low quality</title><link>/2015/12/25/the-true-cost-of-low-quality/</link><pubDate>Fri, 25 Dec 2015 00:00:00 +0000</pubDate><guid>/2015/12/25/the-true-cost-of-low-quality/</guid><description>Recently I’ve found myself have similar conversations with various members of the engineering team regarding the tradeoff between speed and quality. Every situation is different but without going into project details I&amp;rsquo;ve found that quality come first, speed second. Not because I think speed is unimportant but because I think quality is underrated. In the desire to push the next feature and launch the next product quality tends to be sacrificed.</description></item><item><title>Have a work “workout” plan</title><link>/2015/12/20/have-a-work-workout-plan/</link><pubDate>Sun, 20 Dec 2015 00:00:00 +0000</pubDate><guid>/2015/12/20/have-a-work-workout-plan/</guid><description>If you go to the gym you end up getting a lot more out of it if you approach your workout with a plan in mind. The same thing happens with work. If you go every day you will inevitably get better but if you come in with concrete goals and ways to push yourself you’ll be in a much better position. It’s not as easy to measure your performance at work compared to the gym but just taking the first step and realizing that you want to improve is already beyond how most people approach work.</description></item><item><title>Know what's mission critical</title><link>/2015/12/15/know-whats-mission-critical/</link><pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate><guid>/2015/12/15/know-whats-mission-critical/</guid><description>The accepted belief is that startups should move quickly and err on the side of speed rather than quality. This makes sense. Startups are so risky that they won’t fail due to making a few mistakes but will fail if they get out maneuvered and out innovated. The big advantage startups have is speed and that needs be leveraged.
The one caveat I’d make is that every company, big and small, should have mission critical elements that need to be maintained when pushing new features and updates.</description></item><item><title>Adhoc task management</title><link>/2015/11/19/adhoc-task-management/</link><pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate><guid>/2015/11/19/adhoc-task-management/</guid><description>A recent trick I’ve picked up to manage my time a bit better is to take all the adhoc tasks I have to do and scatter them into my calendar for the next few days. This allows me to actually get to working on the tasks and I can make sure none of them are forgotten. Using a calendar also forces me to think about the time I expect these tasks to take and plan around that.</description></item><item><title>Production makes fools of us all</title><link>/2015/10/25/production-makes-fools-of-us-all/</link><pubDate>Sun, 25 Oct 2015 00:00:00 +0000</pubDate><guid>/2015/10/25/production-makes-fools-of-us-all/</guid><description>The biggest development lesson I learned over the years is that production is a completely different beast from development. Code that works perfectly in a development environment can fail catastrophically in production and cause a severe impact on the business. Issues can stem from bits of inefficient codes to database schemas that just don&amp;rsquo;t scale on production. Ideally your development environment mirrors production and has the same load and hardware but that&amp;rsquo;s rarely the case.</description></item><item><title>Writing code? Think about the deployment</title><link>/2015/10/18/writing-code-think-about-the-deployment/</link><pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate><guid>/2015/10/18/writing-code-think-about-the-deployment/</guid><description>The goal of every bit of code should be to make it to production. Code that’s not deployed is wasted effort as well as a loss to the business. And a big part of making sure code is deployed is thinking through the deployment plan as we write the code. Some code is deployed simply by pushing the new application while other code may require updating the database schema. More complex code may depend on other applications which will need to be tweaked and deployed beforehand.</description></item><item><title>Debate what's necessary and no more</title><link>/2015/08/03/debate-whats-necessary-and-no-more/</link><pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate><guid>/2015/08/03/debate-whats-necessary-and-no-more/</guid><description>A critical component in communicating between various teams is knowing who has what responsibility. Especially with driven people it’s easy to have overlap between various functions - product and design; design and frontend engineering; and frontend engineering and backend engineering. This is both good - because it’s able to focus more eyes on a particular problem and provides a new perspective - and bad - because people may feel that they can’t move quickly enough and don’t want to cede decision making power.</description></item><item><title>Power of engineering standards</title><link>/2015/03/18/power-of-engineering-standards/</link><pubDate>Wed, 18 Mar 2015 00:00:00 +0000</pubDate><guid>/2015/03/18/power-of-engineering-standards/</guid><description>When it comes to productive coding, one of the most important things to do is to impose a set of standards and conventions. As long as you stick with them your code becomes significantly easier to write and maintain. Conventions range from having a standard way of declaring variables to the way files are organized within a project to the field names in database tables. The obvious benefit is that your code becomes significantly easier to navigate, both to you as well as to others on the team, since you don’t have to run through a series of searches trying to figure out whether a variable is called myVariable, MyVariable, or my_variable.</description></item><item><title>In praise of the full stack developer</title><link>/2015/02/23/in-praise-of-the-full-stack-developer/</link><pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate><guid>/2015/02/23/in-praise-of-the-full-stack-developer/</guid><description>I’m a pretty new engineering manager but a philosophy I’ve adopted is to try to have everyone on the team be as full stack as possible. Everyone has their strengths and weaknesses but being able to grasp the entire stack improves code quality and reduces disruption. And it goes beyond technology and into the business and user world too. Understanding how these various components fit together allow you to make smarter decisions and provide the tools to test and verify your code.</description></item></channel></rss>