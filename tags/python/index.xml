<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Dan Goldin</title><link>/tags/python/</link><description>Recent content in Python on Dan Goldin</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 24 Sep 2015 00:00:00 +0000</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Mapping the Jersey City parking zones II</title><link>/2015/09/24/mapping-the-jersey-city-parking-zones-ii/</link><pubDate>Thu, 24 Sep 2015 00:00:00 +0000</pubDate><guid>/2015/09/24/mapping-the-jersey-city-parking-zones-ii/</guid><description>&lt;ul class="thumbnails">
 &lt;li class="span8">
 &lt;div class="thumbnail">
 &lt;img src="/image/jersey-city-parking-zones.png" alt="Jersey City parking zones" data-width="442" data-height="640" data-layout="responsive" />
 &lt;/div>
 &lt;/li>
&lt;/ul>
&lt;p>I finally had the chance to finish up the Jersey City parking zone mapping project from a couple of weeks ago. The goal was to take a PDF of valid addresses for each zone and visualize it on a map. The result can be found at &lt;a href="https://dangoldin.github.io/jersey-city-open-data/">https://dangoldin.github.io/jersey-city-open-data/&lt;/a> and includes the zones that had enough geocodeable addresses to generate a valid polygon.&lt;/p></description></item><item><title>Mapping the Jersey City parking zones</title><link>/2015/09/12/mapping-the-jersey-city-parking-zones/</link><pubDate>Sat, 12 Sep 2015 00:00:00 +0000</pubDate><guid>/2015/09/12/mapping-the-jersey-city-parking-zones/</guid><description>&lt;p>A big part of owning a car in Jersey City is dealing with the street parking. Unfortunately, Jersey City does not make it easy to see what the zones are - instead there&amp;rsquo;s a &lt;a href="http://jcparking.org/PDF/ZONE%20PERMITS%20ALL%20ZONES.pdf" target="_blank">PDF&lt;/a> that lists the streets and address ranges that are part of each zone. After getting frustrated with this annoyance for too long I decided to just take matters into my own hands and visualize the zones through some scripting. This is a relatively simple project that still involved some false steps so I wanted to document the process and provide a peek into my development approach.&lt;/p></description></item><item><title>Managing settings files in Django projects</title><link>/2014/08/30/managing-settings-files-in-django-projects/</link><pubDate>Sat, 30 Aug 2014 00:00:00 +0000</pubDate><guid>/2014/08/30/managing-settings-files-in-django-projects/</guid><description>&lt;p>I was helping a friend deploy a Django project over the weekend and we chatted about the best way to manage multiple settings files in a Django project. The primary reason is that you will typically have different settings between a production and development environment and but at the same time will have a lot of options shared between them. A production environment will typically be more restrictive and optimized for performance whereas a development environment will be setup to provide as much debug information as possible.&lt;/p></description></item><item><title>Yahoo fantasy football stats - 2014 edition</title><link>/2014/08/26/yahoo-fantasy-football-stats-2014-edition/</link><pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate><guid>/2014/08/26/yahoo-fantasy-football-stats-2014-edition/</guid><description>&lt;p>This might be too late for some but I dug up my Yahoo fantasy football stats scraper from last year and &lt;a href="https://github.com/dangoldin/yahoo-ffl" target="_blank">updated it to work&lt;/a> for the 2014 season. The old version used the great &lt;a href="http://scrapy.org/" target="_blank">Scrapy&lt;/a> framework but unfortunately Yahoo changed something on their end that made the login spoofing too difficult to do via a backend script. The new approach uses &lt;a href="http://www.seleniumhq.org/" target="_blank">Selenium&lt;/a> to open up a Chrome web browser, login to Yahoo, and then iterate through each page of stats and downloads the data into a CSV file.&lt;/p></description></item><item><title>Using virtualenv in production</title><link>/2014/02/10/using-virtualenv-in-production/</link><pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate><guid>/2014/02/10/using-virtualenv-in-production/</guid><description>&lt;p>One of my favorite things about Python is being able to use &lt;a href="http://www.virtualenv.org/en/latest/index.html" target="_blank">virtualenv&lt;/a> to create isolated environments. It’s extremely simple to use and allows you to have different versions of Python libraries used by different projects.&lt;/p>
&lt;p>The thing that&amp;rsquo;s tricky is getting virtualenv set up on a production environment under different services since each one requires a slightly different configuration. I’ve gone through my projects and collected the various ways I’ve gotten it running for different services. I’m sure I could have done it differently but the following worked for me and will hopefully come in handy to others. If you have any questions or I&amp;rsquo;m not being clear enough let me know and I&amp;rsquo;ll updat the post with more information.&lt;/p></description></item><item><title>Genetic programming Connect 4</title><link>/2013/11/30/genetic-programming-connect-4/</link><pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate><guid>/2013/11/30/genetic-programming-connect-4/</guid><description>&lt;p>Over Thanksgiving break I was going through some old GitHub repos and found an interesting one I wanted to share. It’s a &lt;a href="https://github.com/dangoldin/connect4bot" target="_blank">Connect 4 bot&lt;/a> that’s evolved through a genetic program. The goal of the strategy is to choose a column to move to that will give the highest probability of a win given a board position. To figure out the move column, the genetic program simulates play of strategy against strategy and gives the most successful ones a greater chance of reproducing into the next generation. The idea is that over time the resulting strategy will be the most fit.&lt;/p></description></item><item><title>Extract info from a web page using JavaScript</title><link>/2013/08/26/extract-info-from-a-web-page-using-javascript/</link><pubDate>Mon, 26 Aug 2013 00:00:00 +0000</pubDate><guid>/2013/08/26/extract-info-from-a-web-page-using-javascript/</guid><description>&lt;p>How many times have you tried copying something from a webpage into Excel and discovering that the formatting got completely messed up and forced you to clean the data up manually? With just a bit of knowledge about HTML and CSS you can use JavaScript to get the information you want without having to struggle with the formatting issues.&lt;/p>
&lt;p>In my case, I participated in a fantasy football draft and wanted to share the list of players I drafted with a friend. Unfortunately, copying and pasting didn’t work so I decided to jump into JavaScript. Hope these steps give a sense of how to approach a simple scraping problem. The idea is to use the browser’s inspect element feature to find the pattern that the element we’re interested in have in common. Then, we use JavaScript to find the elements matching that pattern and extract the information we want.&lt;/p></description></item><item><title>Run Django under Nginx, Virtualenv and Supervisor</title><link>/2013/07/30/run-django-under-nginx-virtualenv-and-supervisor/</link><pubDate>Tue, 30 Jul 2013 00:00:00 +0000</pubDate><guid>/2013/07/30/run-django-under-nginx-virtualenv-and-supervisor/</guid><description>&lt;p>After yet another attempt to deploy a &lt;a href="https://www.djangoproject.com/" target="_blank">Django&lt;/a> application I decided to document the steps required to get everything up and running. The tutorials I’ve seen tend to focus on individual pieces rather than on the way all these packages work together which always led to me a lot of dead ends and StackOverflow so this will hopefully address some of those issues.&lt;/p>
&lt;p>In particular, I want to focus on the configuration rather than the installation of the various packages since that’s covered in the package documentation.&lt;/p></description></item><item><title>Scraping Yahoo fantasy football stats with Scrapy</title><link>/2013/07/17/scraping-yahoo-fantasy-football-stats-with-scrapy/</link><pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate><guid>/2013/07/17/scraping-yahoo-fantasy-football-stats-with-scrapy/</guid><description>&lt;p>Last week, someone reminded me of an old project I had on GitHub that scraped fantasy football stats from Yahoo. Unfortunately, it was antiquated and failed to retrieve the data for the current season. I’ve also been interested in trying out the &lt;a href="http://scrapy.org/" target="_blank">Scrapy&lt;/a> framework and decided this would be a good opportunity to give it a shot. I tried finding a sample project that dealt with authentication as a starting point but wasn’t able to find one so hopefully my attempt can serve as an example to others.&lt;/p></description></item><item><title>Adding attachments to django-postman</title><link>/2013/05/17/adding-attachments-to-django-postman/</link><pubDate>Fri, 17 May 2013 00:00:00 +0000</pubDate><guid>/2013/05/17/adding-attachments-to-django-postman/</guid><description>&lt;p>After doing a round of customer development for &lt;a href="https://makersalley.com/" target="_blank">Makers Alley&lt;/a>, we discovered that customers really wanted to communicate with makers about their pieces. In true MVP fashion, we got the first iteration out in a day by using &lt;a href="https://bitbucket.org/psam/django-postman/overview" target="_blank">django-postman&lt;/a> to handle the user to user communication. Within a few days, we quickly discovered that text messages weren&amp;rsquo;t enough and we needed to support file attachments, otherwise makers can’t easily show their designs and customers can’t share what they like. Unfortunately, django-postman does not support attachments and we didn’t want to have to incorporate another messaging library. Another constraint was that we were already using the awesome &lt;a href="http://blueimp.github.io/jQuery-File-Upload/" target="_blank">jQuery File Upload&lt;/a> library (in truth, a modified &lt;a href="https://github.com/sigurdga/django-jquery-file-upload" target="_blank">Django version by Sigurd Gartmann&lt;/a>) to allow makers to upload images when managing their storefronts.&lt;/p></description></item><item><title>Eighteen Months of Django: Part 2</title><link>/2013/05/10/eighteen-months-of-django-part-2/</link><pubDate>Fri, 10 May 2013 00:00:00 +0000</pubDate><guid>/2013/05/10/eighteen-months-of-django-part-2/</guid><description>&lt;p>On Tuesday, I shared some &lt;a href="http://dangoldin.com/2013/05/07/eighteen-months-of-django/" target="_blank">best practices&lt;/a> I picked up while using Django. This is a follow up post to share the packages that I found useful as well as various hiccups I encountered when using them.&lt;/p>
&lt;ul class="bulleted">
 &lt;li>
 &lt;a href="https://django-registration.readthedocs.org/en/latest/index.html" target="_blank">django-registration&lt;/a> and &lt;a href="http://django-social-auth.readthedocs.org/en/latest/" target="_blank">django-social-auth&lt;/a>: Combined, these packages let you handle the basic user registration and activation. Most likely, you will end up having to customize them a bit to do what you want. For example, allowing a user to register using an email address instead of a username or requiring an email address for a user who signs up using Twitter. A small issue that annoyed me is that the signals generated by these two packages occur at different points: django-registration generates signals that includes the request while django-social-auth generates signals that contain the response from the OAuth provider. Depending on your use-case, it may be worth it to use the &lt;a href="https://django-registration.readthedocs.org/en/latest/simple-backend.html" target="_blank">simple backend&lt;/a> for django-registration, it automatically activates and logs-in the newly registered users, making your app a bit easy to get into.&lt;/li>
 &lt;li>&lt;a href="http://django-storages.readthedocs.org/en/latest/" target="_blank">django-storages&lt;/a> and &lt;a href="http://docs.pythonboto.org/en/latest/" target="_blank">boto&lt;/a>: If you plan on using S3 to host static content, definitely take a look at these. They provide backends to make it easy to save and access your static content to S3 without having to deal with the AWS API. I ran into some issues using this along with Cloudfront and django-compressor but I was able to fix them by looking at &lt;a href="http://stackoverflow.com/questions/8688815/django-compressor-how-to-write-to-s3-read-from-cloudfront" target="_blank">Stackoverflow&lt;/a>.&lt;/li>
 &lt;li>&lt;a href="http://django-compressor.readthedocs.org/en/latest/" target="_blank">django-compressor&lt;/a>: This is a neat library that will compress and minify your JS and CSS, check if anything’s been updated, generate an upload the result to static files location, and update the HTML to point to the new location. This makes sure that users never end up with older, cached versions of your static files. One thing to note is that you need to make sure that your Javascript are properly formatted and all end in a semi-colon; otherwise you run the risk of the compression failing. I know that there are other Django compressors &lt;a href="http://django-pipeline.readthedocs.org/en/latest/" target="_blank">out there&lt;/a> but I’ve been happy with django-compressor.&lt;/li>
 &lt;li>&lt;a href="http://sorl-thumbnail.readthedocs.org/en/latest/" target="_blank">sorl-thumbnail&lt;/a> and &lt;a href="http://www.pythonware.com/products/pil/" target="_blank">PIL&lt;/a>: If you allow users to upload images this is a must have. It provides a standard way of resizing the images and caching the result. The library comes built in with support for cropping and a variety of other processing options so you don’t have to worry about it. One thing to note is that if a user is loading a page where none of the images have been generated yet, it will delay the page load until all of the images are generated. As long as you know the required sizes of all images, you can run a task on the &lt;a href="http://sorl-thumbnail.readthedocs.org/en/latest/examples.html#low-level-api-examples" target="_blank">backend to generate&lt;/a> each of the images. You may have trouble installing PIL in a virtualenv but doing some Googling it should be easy to figure out.&lt;/li>
 &lt;li>&lt;a href="http://pythonhosted.org/django-extensions/" target="_blank">django-extensions&lt;/a>: Just a neat library that comes with additional management commands to make developing Django easier.&lt;/li>
 &lt;li>&lt;a href="https://github.com/django-debug-toolbar/django-debug-toolbar" target="_blank">django-debug-toolbar&lt;/a>: This intercepts every Django request and provides some debug information to help you optimize your code. The most useful piece to me is being able to see the SQL queries that are being executed and helps me figure out what needs tweaking/caching.&lt;/li>
 &lt;li>&lt;a href="http://django-crispy-forms.readthedocs.org/en/latest/" target="_blank">django-crispy-forms&lt;/a>: If you’re using Twitter Bootstrap, this is a library that lets you generate Bootstrap forms in Django.&lt;/li>
 &lt;li>&lt;a href="http://docs.celeryproject.org/en/latest/django/" target="_blank">django-celery&lt;/a> and &lt;a href="http://celeryproject.org/" target="_blank">celery&lt;/a>: This is a way to run tasks in the background. With Pressi, we initially started with some management commands behind some cron jobs but we ended up switching to Celery when we wanted to distribute it across multiple machines and have built in support for threading and error handling. One thing to note is that we used RabbitMQ as the backend but it takes a bit of time to setup and I’m still struggling to understand the ways to manage it. A lot of people have been using Redis as the backend successfully and I think I’ll give that a go in future projects.&lt;/li>
 &lt;li>&lt;a href="http://mongoengine.org/" target="_blank">mongoengine&lt;/a> and &lt;a href="http://api.mongodb.org/python/current/" target="_blank">pymongo&lt;/a>: If you’re using Mongo, take a look at mongoengine, which serves as an ORM for Mongo, and is built on top of PyMongo, a Mongo API. Mongoengine makes it very easy to change your models from a relational database to an documented-based one by keeping the field types and model definitions similar. Be aware that document-based databases are significantly different from relational ones and that although cosmetically your models look similar, the interaction with the backend is very different. You shouldn’t switch to MongoDB just because you can - make sure you’re switching for the right reasons. For Pressi, we use a hybrid approach where we use MongoDB to store a user’s social media content with everything else stored in MySQL. Something to be cautious of is that both of these libraries have been evolving pretty quickly and we ran into an issue where we weren't able to consistently connect to a MongoDB instance until we stumbled unto the right versions of the libraries (in our case, 0.6.20 for mongoengine and 2.4.1 for pymongo).&lt;/li>
 &lt;li>&lt;a href="http://haystacksearch.org/" target="_blank">django-haystack&lt;/a>: When you’re ready to graduate from implementing a search using QuerySet filters to an indexing backend, take a look at Haystack. It provides a pretty simple search interface that integrates pretty well with Django and supports a few different backends. We ended up settling on the &lt;a href="http://xapian.org/" target="_blank">Xapian&lt;/a> backend because it was supposedly simpler but ran into some trouble installing it inside a virtualenv until I found &lt;a href="https://gist.github.com/vinilios/199025" target="_blank">this post&lt;/a>. Note that although Haystack supports multiple backends, not all features are supported by every backend so make sure the backend you choose supports everything you need. I believe Solr has the most functionality out of the box but we wanted to keep it simple for Makers Alley.&lt;/li>
 &lt;li>&lt;a href="https://django-postman.readthedocs.org/en/latest/quickstart.html" target="_blank">django-postman&lt;/a>: We just implemented this for Makers Alley but it’s a very simple way of doing user to user messaging. It comes with the standard messaging features (inbox, reply, archive, delete) but one thing I wish it had was a way to include attachments.&lt;/li>
 &lt;li>&lt;a href="http://docs.fabfile.org/en/1.6/" target="_blank">Fabric&lt;/a>: I mentioned this in the previous post but wanted to reiterate it since it makes building and deploying your code easy. It also forces you to think about your environment and you end up with a better structured project as a result.&lt;/li>
 &lt;li>&lt;a href="http://south.aeracode.org/" target="_blank">South&lt;/a>: Another package I mentioned earlier that makes it significantly easier to deal with database migrations in Django. The only time we've run into issues using South is when two of us were making changes to the same model in parallel branches. Even then it's easy to replace the two flawed migrations with a functional one.&lt;/li>
 &lt;li>&lt;a href="https://pypi.python.org/pypi/Unidecode" target="_blank">Unidecode&lt;/a>: This isn’t a Django specific library but we found it useful when cleaning up unicode data. If you ever get random unicode exceptions in your code, Unidecode should be able to help.&lt;/li>
 &lt;li>&lt;a href="http://www.crummy.com/software/BeautifulSoup/" target="_blank">BeautifulSoup&lt;/a> and &lt;a href="http://pythonhosted.org/pyquery/index.html" target="_blank">PyQuery&lt;/a>: If you need to do some HTML scraping in Python, take a look at BeautifulSoup. It turns HTML code into an object that’s easy to navigate and search. After getting more and more familiar with jQuery, I found a python alternative in PyQuery but am still getting comfortable with it. If you come from the jQuery world I’d try using PyQuery first; otherwise I’d try BeautifulSoup.&lt;/li>
 &lt;li>&lt;a href="http://docs.python-requests.org/en/latest/" target="_blank">requests&lt;/a>: Just a nice and simple replacement of urllib and urllib2 that makes it much simpler to make HTTP requests. Your code becomes cleaner, more readable, and more expressive.&lt;/li>
&lt;/ul>
&lt;p>I tried to highlight the libraries that have made developing in Django easier but I’m sure there are tons more. I’d love to hear about them so do share.&lt;/p></description></item><item><title>Eighteen months of Django</title><link>/2013/05/07/eighteen-months-of-django/</link><pubDate>Tue, 07 May 2013 00:00:00 +0000</pubDate><guid>/2013/05/07/eighteen-months-of-django/</guid><description>&lt;p>I’ve discovered that every new project lets me correct mistakes from my earlier attempts by allowing me to start from scratch. This is especially true with a web framework such as Django that has a ton of little nooks and crannies that take a while to explore and understand. It’s usually not worth it to go back and fix something that’s not broken on a functional product but starting a new project lets me do it right from the beginning. Now that I’ve developed and launched (with &lt;a href="http://www.sandylin.com/" target="_blank">Sandy&lt;/a> and &lt;a href="http://marcschaffnergurney.com/" target="_blank">Marc&lt;/a>) two serious Django-based products as well as bunch of smaller ones, I wanted to document some personal best practices I’ve picked up. Obviously, I&amp;rsquo;m still learning and I may be completely wrong with them so let me know if you disagree. If you’re interested in a deeper look at some of the topics let me know and I can write up another post going into detail about a particular topic.&lt;/p></description></item></channel></rss>