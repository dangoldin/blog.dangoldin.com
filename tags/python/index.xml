<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Dan Goldin</title><link>/tags/python/</link><description>Recent content in python on Dan Goldin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 24 Sep 2015 00:00:00 +0000</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Mapping the Jersey City parking zones II</title><link>/2015/09/24/mapping-the-jersey-city-parking-zones-ii/</link><pubDate>Thu, 24 Sep 2015 00:00:00 +0000</pubDate><guid>/2015/09/24/mapping-the-jersey-city-parking-zones-ii/</guid><description>I finally had the chance to finish up the Jersey City parking zone mapping project from a couple of weeks ago. The goal was to take a PDF of valid addresses for each zone and visualize it on a map. The result can be found at https://dangoldin.github.io/jersey-city-open-data/ and includes the zones that had enough geocodeable addresses to generate a valid polygon.
As expected, most of the work was going from the PDF to a set of valid geocoded addresses.</description></item><item><title>Mapping the Jersey City parking zones</title><link>/2015/09/12/mapping-the-jersey-city-parking-zones/</link><pubDate>Sat, 12 Sep 2015 00:00:00 +0000</pubDate><guid>/2015/09/12/mapping-the-jersey-city-parking-zones/</guid><description>A big part of owning a car in Jersey City is dealing with the street parking. Unfortunately, Jersey City does not make it easy to see what the zones are - instead there&amp;rsquo;s a PDF that lists the streets and address ranges that are part of each zone. After getting frustrated with this annoyance for too long I decided to just take matters into my own hands and visualize the zones through some scripting.</description></item><item><title>Managing settings files in Django projects</title><link>/2014/08/30/managing-settings-files-in-django-projects/</link><pubDate>Sat, 30 Aug 2014 00:00:00 +0000</pubDate><guid>/2014/08/30/managing-settings-files-in-django-projects/</guid><description>I was helping a friend deploy a Django project over the weekend and we chatted about the best way to manage multiple settings files in a Django project. The primary reason is that you will typically have different settings between a production and development environment and but at the same time will have a lot of options shared between them. A production environment will typically be more restrictive and optimized for performance whereas a development environment will be setup to provide as much debug information as possible.</description></item><item><title>Yahoo fantasy football stats - 2014 edition</title><link>/2014/08/26/yahoo-fantasy-football-stats-2014-edition/</link><pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate><guid>/2014/08/26/yahoo-fantasy-football-stats-2014-edition/</guid><description>This might be too late for some but I dug up my Yahoo fantasy football stats scraper from last year and updated it to work for the 2014 season. The old version used the great Scrapy framework but unfortunately Yahoo changed something on their end that made the login spoofing too difficult to do via a backend script. The new approach uses Selenium to open up a Chrome web browser, login to Yahoo, and then iterate through each page of stats and downloads the data into a CSV file.</description></item><item><title>Using virtualenv in production</title><link>/2014/02/10/using-virtualenv-in-production/</link><pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate><guid>/2014/02/10/using-virtualenv-in-production/</guid><description>One of my favorite things about Python is being able to use virtualenv to create isolated environments. It’s extremely simple to use and allows you to have different versions of Python libraries used by different projects.
The thing that&amp;rsquo;s tricky is getting virtualenv set up on a production environment under different services since each one requires a slightly different configuration. I’ve gone through my projects and collected the various ways I’ve gotten it running for different services.</description></item><item><title>Genetic programming Connect 4</title><link>/2013/11/30/genetic-programming-connect-4/</link><pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate><guid>/2013/11/30/genetic-programming-connect-4/</guid><description>Over Thanksgiving break I was going through some old GitHub repos and found an interesting one I wanted to share. It’s a Connect 4 bot that’s evolved through a genetic program. The goal of the strategy is to choose a column to move to that will give the highest probability of a win given a board position. To figure out the move column, the genetic program simulates play of strategy against strategy and gives the most successful ones a greater chance of reproducing into the next generation.</description></item><item><title>Extract info from a web page using JavaScript</title><link>/2013/08/26/extract-info-from-a-web-page-using-javascript/</link><pubDate>Mon, 26 Aug 2013 00:00:00 +0000</pubDate><guid>/2013/08/26/extract-info-from-a-web-page-using-javascript/</guid><description>How many times have you tried copying something from a webpage into Excel and discovering that the formatting got completely messed up and forced you to clean the data up manually? With just a bit of knowledge about HTML and CSS you can use JavaScript to get the information you want without having to struggle with the formatting issues.
In my case, I participated in a fantasy football draft and wanted to share the list of players I drafted with a friend.</description></item><item><title>Run Django under Nginx, Virtualenv and Supervisor</title><link>/2013/07/30/run-django-under-nginx-virtualenv-and-supervisor/</link><pubDate>Tue, 30 Jul 2013 00:00:00 +0000</pubDate><guid>/2013/07/30/run-django-under-nginx-virtualenv-and-supervisor/</guid><description>After yet another attempt to deploy a Django application I decided to document the steps required to get everything up and running. The tutorials I’ve seen tend to focus on individual pieces rather than on the way all these packages work together which always led to me a lot of dead ends and StackOverflow so this will hopefully address some of those issues.
In particular, I want to focus on the configuration rather than the installation of the various packages since that’s covered in the package documentation.</description></item><item><title>Scraping Yahoo fantasy football stats with Scrapy</title><link>/2013/07/17/scraping-yahoo-fantasy-football-stats-with-scrapy/</link><pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate><guid>/2013/07/17/scraping-yahoo-fantasy-football-stats-with-scrapy/</guid><description>Last week, someone reminded me of an old project I had on GitHub that scraped fantasy football stats from Yahoo. Unfortunately, it was antiquated and failed to retrieve the data for the current season. I’ve also been interested in trying out the Scrapy framework and decided this would be a good opportunity to give it a shot. I tried finding a sample project that dealt with authentication as a starting point but wasn’t able to find one so hopefully my attempt can serve as an example to others.</description></item><item><title>Adding attachments to django-postman</title><link>/2013/05/17/adding-attachments-to-django-postman/</link><pubDate>Fri, 17 May 2013 00:00:00 +0000</pubDate><guid>/2013/05/17/adding-attachments-to-django-postman/</guid><description>After doing a round of customer development for Makers Alley, we discovered that customers really wanted to communicate with makers about their pieces. In true MVP fashion, we got the first iteration out in a day by using django-postman to handle the user to user communication. Within a few days, we quickly discovered that text messages weren&amp;rsquo;t enough and we needed to support file attachments, otherwise makers can’t easily show their designs and customers can’t share what they like.</description></item><item><title>Eighteen Months of Django: Part 2</title><link>/2013/05/10/eighteen-months-of-django-part-2/</link><pubDate>Fri, 10 May 2013 00:00:00 +0000</pubDate><guid>/2013/05/10/eighteen-months-of-django-part-2/</guid><description>On Tuesday, I shared some best practices I picked up while using Django. This is a follow up post to share the packages that I found useful as well as various hiccups I encountered when using them.
django-registration and django-social-auth: Combined, these packages let you handle the basic user registration and activation. Most likely, you will end up having to customize them a bit to do what you want. For example, allowing a user to register using an email address instead of a username or requiring an email address for a user who signs up using Twitter.</description></item><item><title>Eighteen months of Django</title><link>/2013/05/07/eighteen-months-of-django/</link><pubDate>Tue, 07 May 2013 00:00:00 +0000</pubDate><guid>/2013/05/07/eighteen-months-of-django/</guid><description>I’ve discovered that every new project lets me correct mistakes from my earlier attempts by allowing me to start from scratch. This is especially true with a web framework such as Django that has a ton of little nooks and crannies that take a while to explore and understand. It’s usually not worth it to go back and fix something that’s not broken on a functional product but starting a new project lets me do it right from the beginning.</description></item></channel></rss>